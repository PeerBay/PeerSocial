{
  "name": "simple-websocket",
  "description": "Simple, EventEmitter API for WebSockets (browser)",
  "version": "2.3.4",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "browser": {
    "ws": false
  },
  "bugs": {
    "url": "https://github.com/feross/simple-websocket/issues"
  },
  "dependencies": {
    "debug": "^2.1.3",
    "inherits": "^2.0.1",
    "is-typedarray": "^1.0.0",
    "typedarray-to-buffer": "^3.0.1",
    "ws": "^0.7.1"
  },
  "devDependencies": {
    "browserify": "^10.1.0",
    "standard": "^4.5.1",
    "tape": "^4.0.0",
    "uglify-js": "^2.4.15",
    "zuul": "^3.0.0"
  },
  "homepage": "https://github.com/feross/simple-websocket",
  "keywords": [
    "websocket",
    "socket",
    "ws",
    "simple",
    "simple websocket",
    "simple-websocket"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/simple-websocket.git"
  },
  "scripts": {
    "test": "standard && npm run test-node && npm run test-browser",
    "test-browser": "zuul -- test/*.js",
    "test-browser-local": "zuul --local -- test/*.js",
    "test-node": "tape test/*.js",
    "build": "browserify -s SimpleWebsocket -r ./ | uglifyjs -c warnings=false -m > simplewebsocket.bundle.js"
  },
  "standard": {
    "ignore": [
      "simplewebsocket.bundle.js"
    ]
  },
  "testling": {
    "files": "test/*.js"
  },
  "readme": "# simple-websocket [![travis](https://img.shields.io/travis/feross/simple-websocket.svg)](https://travis-ci.org/feross/simple-websocket) [![npm](https://img.shields.io/npm/v/simple-websocket.svg)](https://npmjs.org/package/simple-websocket)\n\n#### Simple, EventEmitter API for WebSockets\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/simple-websocket.svg)](https://saucelabs.com/u/simple-websocket)\n\n## features\n\n- **super simple** API for working with WebSockets in the browser\n- Uses `EventEmitter` interface\n- supports **text and binary data**\n\nThis module works in the browser with [browserify](http://browserify.org/), and it's used by [WebTorrent](http://webtorrent.io)!\n\n## install\n\n```\nnpm install simple-websocket\n```\n\n## usage\n\n```js\nvar SimpleWebsocket = require('simple-websocket')\n\nvar socket = new SimpleWebsocket('ws://echo.websocket.org')\nsocket.on('connect', function () {\n  // socket is connected!\n  socket.send('sup!')\n})\n\nsocket.on('data', function (data) {\n  console.log('got message: ' + data)\n})\n```\n\nNote: If you're **NOT** using browserify, then use the standalone `simplewebsocket.bundle.js`\nfile included in this repo. This exports a `SimpleWebsocket` function on the `window`.\n\n## api\n\n### `socket = new SimpleWebsocket([opts])`\n\nCreate a new WebSocket connection.\n\nIf `opts` is specified, then the default options (shown below) will be overridden.\n\n```\n{\n  reconnect: 5000\n}\n```\n\nThe options do the following:\n\n- `reconnect` - If websocket encounters an error, reconnect after this timeout (in milliseconds). Set to `false` to disable automatic reconnect on error.\n\n### `socket.send(data)`\n\nSend text/binary data to the WebSocket server. `data` can be any of several types:\n`String`, `Buffer` (see [buffer](https://github.com/feross/buffer)), `TypedArrayView`\n(`Uint8Array`, etc.), `ArrayBuffer`, or `Blob` (in browsers that support it).\n\nOther data types will be transformed with `JSON.stringify` before sending. This is handy\nfor sending object literals across like this: `socket.send({ type: 'data', data: 'hi' })`.\n\nNote: If this method is called before the `socket.on('connect')` event has fired, then\ndata will be buffered.\n\n### `socket.destroy([onclose])`\n\nDestroy and cleanup this websocket connection.\n\nIf the optional `onclose` paramter is passed, then it will be registered as a listener on the 'close' event.\n\n\n## events\n\n### `socket.on('connect', function () {})`\n\nFired when the websocket connection is ready to use.\n\n### `socket.on('data', function (data) {})`\n\nReceived a message from the websocket server.\n\n`data` will be either a `String` or a `Buffer/Uint8Array` (see [buffer](https://github.com/feross/buffer)).\n\n### `socket.on('close', function () {})`\n\nCalled when the websocket connection has closed.\n\n### `socket.on('error', function (err) {})`\n\n`err` is an `Error` object.\n\nFired when a fatal error occurs. If the `reconnect` option is set to something truthy (defaults to `5000`), then this event will never get emitted because the socket will automatically reconnect on error.\n\n### `socket.on('warning', function (err) {})`\n\n`err` is an `Error` object.\n\nFired when an error occurs but an auto-reconnect will be attempted. Thus, it's only a `warning`, not a full-fledged `error`.\n\n## real-world applications that use simple-websocket\n\n- [StudyNotes](http://www.apstudynotes.org) - Helping students learn faster and better\n- [instant.io](https://github.com/feross/instant.io) - Secure, anonymous, streaming file transfer\n- [lxjs-chat](https://github.com/feross/lxjs-chat) - Omegle chat clone\n- \\[ your application here - send a PR \\]\n\n## license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "simple-websocket@2.3.4",
  "_from": "simple-websocket@^2.0.0"
}
