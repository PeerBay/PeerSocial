{
  "name": "bittorrent-tracker",
  "description": "Simple, robust, BitTorrent tracker (client & server) implementation",
  "version": "6.0.4",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bin": {
    "bittorrent-tracker": "./bin/cmd.js"
  },
  "browser": {
    "./lib/common-node": false,
    "./lib/client/http-tracker": false,
    "./lib/client/udp-tracker": false,
    "./server": false
  },
  "bugs": {
    "url": "https://github.com/feross/bittorrent-tracker/issues"
  },
  "dependencies": {
    "bencode": "^0.7.0",
    "bn.js": "^3.0.1",
    "buffer-equal": "0.0.1",
    "compact2string": "^1.2.0",
    "debug": "^2.0.0",
    "hat": "0.0.3",
    "inherits": "^2.0.1",
    "ip": "^0.3.0",
    "minimist": "^1.1.1",
    "once": "^1.3.0",
    "random-iterate": "^1.0.1",
    "run-parallel": "^1.1.2",
    "run-series": "^1.0.2",
    "simple-get": "^1.3.0",
    "simple-peer": "^5.0.0",
    "simple-websocket": "^2.0.0",
    "string2compact": "^1.1.1",
    "uniq": "^1.0.1",
    "ws": "^0.7.1",
    "xtend": "^4.0.0"
  },
  "devDependencies": {
    "magnet-uri": "^5.0.0",
    "parse-torrent": "^5.0.0",
    "standard": "^4.3.2",
    "tape": "^4.0.0"
  },
  "keywords": [
    "torrent",
    "bittorrent",
    "tracker",
    "stream",
    "peer",
    "wire",
    "p2p",
    "peer-to-peer"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/bittorrent-tracker.git"
  },
  "scripts": {
    "test": "standard && tape test/*.js",
    "start": "node server.js"
  },
  "readme": "# bittorrent-tracker [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url]\n\n[travis-image]: https://img.shields.io/travis/feross/bittorrent-tracker.svg?style=flat\n[travis-url]: https://travis-ci.org/feross/bittorrent-tracker\n[npm-image]: https://img.shields.io/npm/v/bittorrent-tracker.svg?style=flat\n[npm-url]: https://npmjs.org/package/bittorrent-tracker\n[downloads-image]: https://img.shields.io/npm/dm/bittorrent-tracker.svg?style=flat\n[downloads-url]: https://npmjs.org/package/bittorrent-tracker\n\n#### Simple, robust, BitTorrent tracker (client & server) implementation\n\n![tracker](https://raw.githubusercontent.com/feross/bittorrent-tracker/master/img.png)\n\nNode.js implementation of a [BitTorrent tracker](https://wiki.theory.org/BitTorrentSpecification#Tracker_HTTP.2FHTTPS_Protocol), client and server.\n\nA **BitTorrent tracker** is an HTTP service which responds to GET requests from BitTorrent\nclients. The requests include metrics from clients that help the tracker keep overall\nstatistics about the torrent. The response includes a peer list that helps the client\nparticipate in the torrent.\n\nThis module is used by [WebTorrent](http://webtorrent.io).\n\n## features\n\n- includes client & server implementations\n- supports HTTP & UDP trackers ([BEP 15](http://www.bittorrent.org/beps/bep_0015.html))\n- supports tracker \"scrape\" extension\n- robust and well-tested (comprehensive test suite, and used by [WebTorrent](http://webtorrent.io) and [peerflix](https://github.com/mafintosh/peerflix))\n- supports ipv4 & ipv6\n\nAlso see [bittorrent-dht](https://github.com/feross/bittorrent-dht).\n\n## install\n\n```\nnpm install bittorrent-tracker\n```\n\n## usage\n\n### client\n\nTo connect to a tracker, just do this:\n\n```js\nvar Client = require('bittorrent-tracker')\nvar parseTorrent = require('parse-torrent')\nvar fs = require('fs')\n\nvar torrent = fs.readFileSync(__dirname + '/torrents/bitlove-intro.torrent')\nvar parsedTorrent = parseTorrent(torrent) // { infoHash: 'xxx', length: xx, announce: ['xx', 'xx'] }\n\nvar peerId = new Buffer('01234567890123456789')\nvar port = 6881\n\nvar client = new Client(peerId, port, parsedTorrent)\n\nclient.on('error', function (err) {\n  // fatal client error!\n  console.log(err.message)\n})\n\nclient.on('warning', function (err) {\n  // a tracker was unavailable or sent bad data to the client. you can probably ignore it\n  console.log(err.message)\n})\n\n// start getting peers from the tracker\nclient.start()\n\nclient.on('update', function (data) {\n  console.log('got an announce response from tracker: ' + data.announce)\n  console.log('number of seeders in the swarm: ' + data.complete)\n  console.log('number of leechers in the swarm: ' + data.incomplete)\n})\n\nclient.once('peer', function (addr) {\n  console.log('found a peer: ' + addr) // 85.10.239.191:48623\n})\n\n// announce that download has completed (and you are now a seeder)\nclient.complete()\n\n// force a tracker announce. will trigger more 'update' events and maybe more 'peer' events\nclient.update()\n\n// stop getting peers from the tracker, gracefully leave the swarm\nclient.stop()\n\n// ungracefully leave the swarm (without sending final 'stop' message)\nclient.destroy()\n\n// scrape\nclient.scrape()\n\nclient.on('scrape', function (data) {\n  console.log('got a scrape response from tracker: ' + data.announce)\n  console.log('number of seeders in the swarm: ' + data.complete)\n  console.log('number of leechers in the swarm: ' + data.incomplete)\n  console.log('number of total downloads of this torrent: ' + data.incomplete)\n})\n```\n\n### server\n\nTo start a BitTorrent tracker server to track swarms of peers:\n\n```js\nvar Server = require('bittorrent-tracker').Server\n\nvar server = new Server({\n  udp: true, // enable udp server? [default=true]\n  http: true, // enable http server? [default=true]\n  ws: true, // enable websocket server? [default=true]\n  filter: function (infoHash, params, cb) {\n    // Blacklist/whitelist function for allowing/disallowing torrents. If this option is\n    // omitted, all torrents are allowed. It is possible to interface with a database or\n    // external system before deciding to allow/deny, because this function is async.\n\n    // It is possible to block by peer id (whitelisting torrent clients) or by secret\n    // key (private trackers). Full access to the original HTTP/UDP request parameters\n    // are available n `params`.\n\n    // This example only allows one torrent.\n\n    var allowed = (infoHash === 'aaa67059ed6bd08362da625b3ae77f6f4a075aaa')\n    cb(allowed)\n\n    // In addition to returning a boolean (`true` for allowed, `false` for disallowed),\n    // you can return an `Error` object to disallow and provide a custom reason.\n  })\n})\n\n// Internal http, udp, and websocket servers exposed as public properties.\nserver.http\nserver.udp\nserver.ws\n\nserver.on('error', function (err) {\n  // fatal server error!\n  console.log(err.message)\n})\n\nserver.on('warning', function (err) {\n  // client sent bad data. probably not a problem, just a buggy client.\n  console.log(err.message)\n})\n\nserver.on('listening', function () {\n  // fired when all requested servers are listening\n  console.log('listening on http port:' + server.http.address().port)\n  console.log('listening on udp port:' + server.udp.address().port)\n})\n\n// start tracker server listening! Use 0 to listen on a random free port.\nserver.listen(port, hostname, onlistening)\n\n// listen for individual tracker messages from peers:\n\nserver.on('start', function (addr) {\n  console.log('got start message from ' + addr)\n})\n\nserver.on('complete', function (addr) {})\nserver.on('update', function (addr) {})\nserver.on('stop', function (addr) {})\n\n// get info hashes for all torrents in the tracker server\nObject.keys(server.torrents)\n\n// get the number of seeders for a particular torrent\nserver.torrents[infoHash].complete\n\n// get the number of leechers for a particular torrent\nserver.torrents[infoHash].incomplete\n\n// get the peers who are in a particular torrent swarm\nserver.torrents[infoHash].peers\n```\n\nThe http server will handle requests for the following paths: `/announce`, `/scrape`. Requests for other paths will not be handled.\n\n## command line\n\nEasily start a tracker server:\n\n```sh\n$ bittorrent-tracker\nhttp server listening on 8000\nudp server listening on 8000\nws server listening on 8000\n```\n\nLots of options:\n\n```sh\n$ bittorrent-tracker --help\n  bittorrent-tracker - Start a bittorrent tracker server\n\n  Usage:\n      bittorrent-tracker\n\n  Options:\n      -p, --port [number]     change the port [default: 8000]\n          --trust-proxy       trust 'x-forwarded-for' header from reverse proxy\n          --interval          tell clients to announce on this interval (ms)\n          --http              enable http server [default: true]\n          --udp               enable udp server [default: true]\n          --ws                enable ws server [default: false]\n      -q, --quiet             only show error output\n      -s, --silent            show no output\n      -v, --version           print the current version\n\n  Please report bugs!  https://github.com/feross/bittorrent-tracker/issues\n```\n\n## license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/feross/bittorrent-tracker",
  "_id": "bittorrent-tracker@6.0.4",
  "_from": "bittorrent-tracker@"
}
